// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/role_right_repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository/role_right_repository.go -destination=./repository/mock/mock_role_right_repository.go -package=mockrepo
//

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"
	domain "tablelink/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockRoleRightRepository is a mock of RoleRightRepository interface.
type MockRoleRightRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoleRightRepositoryMockRecorder
	isgomock struct{}
}

// MockRoleRightRepositoryMockRecorder is the mock recorder for MockRoleRightRepository.
type MockRoleRightRepositoryMockRecorder struct {
	mock *MockRoleRightRepository
}

// NewMockRoleRightRepository creates a new mock instance.
func NewMockRoleRightRepository(ctrl *gomock.Controller) *MockRoleRightRepository {
	mock := &MockRoleRightRepository{ctrl: ctrl}
	mock.recorder = &MockRoleRightRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleRightRepository) EXPECT() *MockRoleRightRepositoryMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockRoleRightRepository) CheckPermission(ctx context.Context, roleID int, section, route string) (*domain.RoleRight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", ctx, roleID, section, route)
	ret0, _ := ret[0].(*domain.RoleRight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockRoleRightRepositoryMockRecorder) CheckPermission(ctx, roleID, section, route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockRoleRightRepository)(nil).CheckPermission), ctx, roleID, section, route)
}
