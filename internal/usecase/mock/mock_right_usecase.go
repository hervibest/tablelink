// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/right_usecase.go
//
// Generated by this command:
//
//	mockgen -source=./usecase/right_usecase.go -destination=./usecase/mock/mock_right_usecase.go -package=mockusecase
//

// Package mockusecase is a generated GoMock package.
package mockusecase

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRightUseCase is a mock of RightUseCase interface.
type MockRightUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRightUseCaseMockRecorder
	isgomock struct{}
}

// MockRightUseCaseMockRecorder is the mock recorder for MockRightUseCase.
type MockRightUseCaseMockRecorder struct {
	mock *MockRightUseCase
}

// NewMockRightUseCase creates a new mock instance.
func NewMockRightUseCase(ctrl *gomock.Controller) *MockRightUseCase {
	mock := &MockRightUseCase{ctrl: ctrl}
	mock.recorder = &MockRightUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRightUseCase) EXPECT() *MockRightUseCaseMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockRightUseCase) Authorize(ctx context.Context, roleID int, section, route, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, roleID, section, route, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockRightUseCaseMockRecorder) Authorize(ctx, roleID, section, route, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockRightUseCase)(nil).Authorize), ctx, roleID, section, route, action)
}
