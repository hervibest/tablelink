// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/cache_adapter.go
//
// Generated by this command:
//
//	mockgen -source=./adapter/cache_adapter.go -destination=./adapter/mock/mock_cache_adapter.go -package=mockadapter
//

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheAdapter is a mock of CacheAdapter interface.
type MockCacheAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCacheAdapterMockRecorder
	isgomock struct{}
}

// MockCacheAdapterMockRecorder is the mock recorder for MockCacheAdapter.
type MockCacheAdapterMockRecorder struct {
	mock *MockCacheAdapter
}

// NewMockCacheAdapter creates a new mock instance.
func NewMockCacheAdapter(ctrl *gomock.Controller) *MockCacheAdapter {
	mock := &MockCacheAdapter{ctrl: ctrl}
	mock.recorder = &MockCacheAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheAdapter) EXPECT() *MockCacheAdapterMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockCacheAdapter) Del(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockCacheAdapterMockRecorder) Del(ctx any, keys ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCacheAdapter)(nil).Del), varargs...)
}

// Get mocks base method.
func (m *MockCacheAdapter) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheAdapterMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheAdapter)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCacheAdapter) Set(ctx context.Context, key string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheAdapterMockRecorder) Set(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheAdapter)(nil).Set), ctx, key, value, expiration)
}
